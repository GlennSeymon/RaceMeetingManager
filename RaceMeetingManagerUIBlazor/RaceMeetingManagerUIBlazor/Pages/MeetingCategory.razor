@page "/meetingCategory"

@using RaceMeetingManagerUIBlazor.Data
@using RaceMeetingManagerDTOLayer
@using System.Linq

@inject MeetingCategoryService meetingCategoryService

<h1>Meeting Category</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (meetingCategories == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<DataGrid TItem="MeetingCategoryDTO"
			  Data="@meetingCategories"
			  IsStriped="true"
			  UseInternalEditing="true"
			  EditMode="@editMode"
			  AllowEdit="@allowEdit"
			  AllowSort="@allowSort"
			  AllowFilter="@allowFilter"
			  ShowPager="@showPager"
			  RowInserted="@OnRowInserted"
			  RowUpdated="@OnRowUpdated"
			  RowRemoved="@OnRowRemoved">
		<DataGridCommandColumn TItem="MeetingCategoryDTO">
			<NewCommandTemplate>
				<Button Color="Color.Success" Clicked="@context.Clicked">New</Button>
			</NewCommandTemplate>
			<EditCommandTemplate>
				<Button Color="Color.Primary" Clicked="@context.Clicked">Edit</Button>
			</EditCommandTemplate>
			<SaveCommandTemplate>
				<Button Color="Color.Primary" Clicked="@context.Clicked">Save</Button>
			</SaveCommandTemplate>
			<DeleteCommandTemplate>
				<Button Color="Color.Danger" Clicked="@context.Clicked">Delete</Button>
			</DeleteCommandTemplate>
			<CancelCommandTemplate>
				<Button Color="Color.Secondary" Clicked="@context.Clicked">Cancel</Button>
			</CancelCommandTemplate>
			<ClearFilterCommandTemplate>
				<Button Color="Color.Warning" Clicked="@context.Clicked">Clear Filter</Button>
			</ClearFilterCommandTemplate>
		</DataGridCommandColumn>
		<DataGridNumericColumn TItem="MeetingCategoryDTO" Field="@nameof(MeetingCategoryDTO.MeetingCategoryCode)" Caption="Id" />
		<DataGridColumn TItem="MeetingCategoryDTO" Field="@nameof(MeetingCategoryDTO.Description)" Caption="Description" AllowEdit="true" />
	</DataGrid>

	<Button Clicked="@(() => allowEdit = !allowEdit)" Color="Color.Primary">Toggle Edit</Button>
}

@code {
	DataGridEditMode editMode = DataGridEditMode.Popup;
	bool allowEdit = false;
	bool allowSort = true;
	bool allowFilter = true;
	bool showPager = false;

	List<MeetingCategoryDTO> meetingCategories;

	protected override async Task OnInitializedAsync()
	{
		await Load();
	}

	protected async Task OnRowInserted(SavedRowItem<MeetingCategoryDTO, Dictionary<string, object>> e)
	{
		var meetingCategoryDTO = e.Item;

		var response = await meetingCategoryService.InsertMeetingCategoryAsync(meetingCategoryDTO);
		await Load();
	}

	protected async Task OnRowUpdated(SavedRowItem<MeetingCategoryDTO, Dictionary<string, object>> e)
	{
		var meetingCategoryDTO = e.Item;

		meetingCategoryDTO.Description = (string)e.Values["Description"];
		var response = await meetingCategoryService.UpdateMeetingCategoryAsync(meetingCategoryDTO.MeetingCategoryCode, meetingCategoryDTO);
	}

	protected async Task OnRowRemoved(MeetingCategoryDTO meetingCategoryDTO)
	{
		if (meetingCategories.Contains(meetingCategoryDTO))
			meetingCategories.Remove(meetingCategoryDTO);

		var response = await meetingCategoryService.DeleteMeetingCategoryAsync(meetingCategoryDTO.MeetingCategoryCode);
	}

	protected async Task Load() {
		var meetingCategoriesDTO = await meetingCategoryService.GetMeetingCategoryAsync();
		meetingCategories = meetingCategoriesDTO.ToList();
	}
}